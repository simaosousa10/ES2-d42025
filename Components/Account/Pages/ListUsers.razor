@page "/ListUsers"
@inject NavigationManager NavigationManager
@inject IListUserService ListUserService
@using ESIID42025.DTOs
@rendermode @(new InteractiveServerRenderMode(prerender: false));
@inject JsInteropService JsInterop




<PageTitle>Utilizadores</PageTitle>

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-start align-items-center mb-3">
        <button class="btn btn-outline-secondary me-3" @onclick="GoBack">
            <i class="bi bi-arrow-left"></i> 
        </button>
        <h3 class="mb-0">ðŸ‘¥Utilizadores</h3>
    </div>
</div>

@if (users.Count == 0)
{
    <p><em>A carregar utilizadores...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>Nome</th>
            <th>Email</th>
            <th>TelemÃ³vel</th>
            <th>Ativo</th>
            <th>AÃ§Ãµes</th>

        </tr>
        </thead>
        <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.Name</td>
                <td>@user.Email</td>
                <td>@user.PhoneNumber</td>
                <td>@(user.IsActive ? "Sim" : "NÃ£o")</td>
                <td>
                    <button class="btn btn-primary btn-sm me-2" @onclick="() => VerAtividades(user.Id)">
                        Ver Atividades
                    </button>
                    
                    @if (user.IsActive)
                    {
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => ToggleUserState(user.Id, false)">Desativar</button>
                    }
                    else
                    {
                        <button class="btn btn-success btn-sm me-2" @onclick="() => ToggleUserState(user.Id, true)">Ativar</button>
                    }

                </td>





            </tr>
        }
        </tbody>
    </table>
}

@code {
    List<ListUserDto> users = new List<ListUserDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await ListUserService.GetAllUsersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erro ao carregar utilizadores: " + ex.Message);
        }
    }


    private void GoBack()
    {
        NavigationManager.NavigateTo("/AdminFeatures");
    }
    
    private async Task ToggleUserState(string userId, bool newState)
    {
        var user = users.FirstOrDefault(u => u.Id == userId);
        if (user == null) return;

        string acao = newState ? "ativar" : "desativar";
        string msg = $"Tem certeza que quer {acao} a conta de {user.Name} (ID {user.Id})?";

        bool confirmado = await JsInterop.Confirm(msg);
        if (!confirmado) return;

        await ListUserService.SetUserActiveStatusAsync(userId, newState);
        users = await ListUserService.GetAllUsersAsync();
        StateHasChanged();
    }
    
    private void VerAtividades(string userId)
    {
        NavigationManager.NavigateTo($"/UserActivities/{userId}");
    }

}
@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using BlazorAuthorizationDotNet8.Components.Account
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ESIID42025.Data
@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Login</PageTitle>

<style>
    body {
        background-color: #f8f9fa;
        margin: 0;
    }

    .auth-logo {
        position: absolute;
        top: -35px;
        left: 20px;
        width: 160px;
    }

    .login-wrapper {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        min-height: 100vh;
        padding-top: 40px;
    }

    .login-card {
        background-color: white;
        padding: 50px;
        border-radius: 16px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        width: 460px;
    }

    .login-card h2 {
        text-align: center;
        color: #3064fc;
        margin-bottom: 30px;
        font-size: 26px;
    }

    .form-label {
        font-weight: 500;
    }

    .form-control {
        margin-bottom: 15px;
    }

    .form-check-label {
        font-weight: normal;
    }

    .btn-login {
        width: 100%;
        background-color: #3064fc;
        color: white;
        font-weight: 600;
        border: none;
        padding: 12px;
        border-radius: 6px;
        margin-top: 10px;
        font-size: 16px;
    }

    .btn-login:hover {
        background-color: #2553cc;
    }

    .login-links {
        text-align: center;
        margin-top: 20px;
    }

    .login-links a {
        display: block;
        color: #3064fc;
        font-size: 14px;
        text-decoration: none;
        margin-bottom: 5px;
    }

    .login-links a:hover {
        text-decoration: underline;
    }

    .text-danger {
        color: red;
        text-align: center;
        margin-bottom: 10px;
    }
</style>

<a href="/">
    <img src="/images/LogoEmAzul.png" class="auth-logo" alt="DealRadar Logo" />
</a>

<div class="login-wrapper">
    <div class="login-card">
        <h2><strong>Login</strong></h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="text-danger">@errorMessage</div>
        }

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="loginForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <label for="email" class="form-label">Email</label>
            <InputText @bind-Value="Input.Email" id="email" class="form-control" placeholder="Enter your email" />
            <ValidationMessage For="@(() => Input.Email)" class="text-danger" />

            <label for="password" class="form-label">Password</label>
            <InputText @bind-Value="Input.Password" id="password" type="password" class="form-control" placeholder="Enter your password" />
            <ValidationMessage For="@(() => Input.Password)" class="text-danger" />

            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="remember" />
                <label class="form-check-label" for="remember">Remember me</label>
            </div>

            <button type="submit" class="btn-login">Login</button>

            <div class="login-links">
                <a href="/Account/ForgotPassword">Forgot your password?</a>
                <a href="@NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })"
                   style="margin-top: 6px; display: inline-block;">Register as a new user</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var user = await SignInManager.UserManager.FindByEmailAsync(Input.Email);

        if (user == null || !await SignInManager.UserManager.CheckPasswordAsync(user, Input.Password))
        {
            errorMessage = "Error: Invalid login attempt.";
            return;
        }

        if (!user.IsActive)
        {
            NavigationManager.NavigateTo("/Account/InactiveAccount");
            return;
        }

        var result = await SignInManager.PasswordSignInAsync(user, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() {
                ["returnUrl"] = ReturnUrl,
                ["rememberMe"] = Input.RememberMe
            });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

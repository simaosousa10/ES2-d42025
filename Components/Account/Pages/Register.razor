@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BlazorAuthorizationDotNet8.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ESIID42025.Data

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject IEmailSender<User> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<style>
    body {
        background-color: #f8f9fa;
        margin: 0;
    }

    .auth-logo {
        position: absolute;
        top: -35px;
        left: 20px;
        width: 160px;
    }

    .register-wrapper {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        min-height: 100vh;
        padding-top: 40px;
    }

    .register-card {
        background-color: white;
        padding: 50px;
        border-radius: 16px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        width: 460px;
    }

    .register-card h2 {
        text-align: center;
        color: #3064fc;
        margin-bottom: 30px;
        font-size: 26px;
    }

    .form-label {
        font-weight: 500;
    }

    .form-control {
        margin-bottom: 15px;
    }

    .btn-register {
        width: 100%;
        background-color: #3064fc;
        color: white;
        font-weight: 600;
        border: none;
        padding: 12px;
        border-radius: 6px;
        margin-top: 10px;
        font-size: 16px;
    }

    .btn-register:hover {
        background-color: #2553cc;
    }

    .register-links {
        text-align: center;
        margin-top: 20px;
    }

    .register-links a {
        color: #3064fc;
        font-size: 14px;
        text-decoration: none;
    }

    .register-links a:hover {
        text-decoration: underline;
    }
</style>

<a href="/">
    <img src="/images/LogoEmAzul.png" class="auth-logo" alt="DealRadar Logo" />
</a>

<div class="register-wrapper">
    <div class="register-card">
        <h2>Create a new account</h2>

        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <label for="name" class="form-label">Full Name</label>
            <InputText @bind-Value="Input.Name" class="form-control" placeholder="Your name" />
            <ValidationMessage For="() => Input.Name" class="text-danger" />

            <label for="dob" class="form-label">Date of Birth</label>
            <InputDate @bind-Value="Input.DateOfBirth" class="form-control" />
            <ValidationMessage For="() => Input.DateOfBirth" class="text-danger" />

            <label for="email" class="form-label">Email</label>
            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" placeholder="name@example.com" />
            <ValidationMessage For="() => Input.Email" class="text-danger" />

            <label for="password" class="form-label">Password</label>
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" placeholder="Password" />
            <ValidationMessage For="() => Input.Password" class="text-danger" />

            <label for="confirm-password" class="form-label">Confirm Password</label>
            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Confirm password" />
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />

            <button type="submit" class="btn-register">Register</button>

            <div class="register-links">
                <a href="/Account/Login">Already have an account? Login</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        user.Name = Input.Name;
        user.DateOfBirth = DateTime.SpecifyKind(Input.DateOfBirth, DateTimeKind.Utc);

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() {
                ["email"] = Input.Email,
                ["returnUrl"] = ReturnUrl
            });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private User CreateUser()
    {
        try
        {
            return Activator.CreateInstance<User>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(User)}'. " +
                                                $"Ensure that '{nameof(User)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<User> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<User>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        public string Name { get; set; } = "";

        [Required]
        [DataType(DataType.Date)]
        [Display(Name = "Date of Birth")]
        public DateTime DateOfBirth { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}

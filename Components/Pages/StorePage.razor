@page "/store/{id:int}"
@using System.Text.RegularExpressions
@inject StoreService StoreService
@inject IProductService ProductService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (store == null)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status"></div>
        <p class="mt-3">A carregar dados da loja...</p>
    </div>
}
else
{
    <div class="mt-4 px-4 d-flex">
    <!-- Coluna Esquerda fixa -->
    <div style="width: 33.33%; position: sticky; top: 90px; align-self: flex-start; height: calc(100vh - 90px); overflow-y: auto;">
        <h1 class="fw-bold text-primary" style="font-size: 3rem;">@store.Name</h1>
        <p class="text-muted fs-6">@store.Location</p>

        @if (isMapReady && !string.IsNullOrEmpty(Latitude) && !string.IsNullOrEmpty(Longitude))
        {
            <div class="d-flex justify-content-start">
                <div id="map" style="
                    width: 100%;
                    height: 500px;
                    border-radius: 8px;
                    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
                    margin-top: 15px;">
                </div>
            </div>
        }
    </div>

    <!-- Coluna Direita com produtos -->
    <div style="width: 66.66%; margin-left: 2rem;">
        <h3 class="fw-bold">Produtos da loja <small class="text-muted">(@allProducts.Count)</small></h3>

        <div id="product-list" class="d-grid gap-4 mt-3" style="grid-template-columns: repeat(4, 1fr); overflow-y: auto;">
            @foreach (var product in displayedProducts)
            {
                var price = product.Prices?.OrderByDescending(p => p.Date).FirstOrDefault();

                <div class="card shadow-sm border-0 h-100" style="cursor: pointer;" @onclick="() => NavigateToProduct(product.ID)">
                    <img src="@(product.Images?.FirstOrDefault()?.UrlImage ?? "/images/default.png")"
                         class="card-img-top p-3"
                         style="height: 200px; object-fit: contain;"
                         alt="@product.Name" />

                    <div class="card-body d-flex flex-column justify-content-between">
                        <h6 class="card-title text-truncate">@product.Name</h6>
                        <p class="mb-1"><strong>@(price?.Value.ToString("C2") ?? "N/A")</strong></p>
                        <small class="text-muted">@product.Category?.Name</small>
                    </div>
                </div>
            }
        </div>

        <div id="scroll-anchor"></div>
    </div>
</div>
}

@code {
    [Parameter] public int id { get; set; }
    private Store store;
    private List<Product> allProducts = new();
    private List<Product> displayedProducts = new();
    private string Latitude => ExtractLatitudeFromUrl(store?.GoogleMaps_URL);
    private string Longitude => ExtractLongitudeFromUrl(store?.GoogleMaps_URL);
    private bool isMapReady = false;

    private int batchSize = 8;
    private int loadedCount = 0;
    private bool isLoadingMore = false;

    protected override async Task OnInitializedAsync()
    {
        store = await StoreService.GetStoreByIdAsync(id);
        allProducts = await ProductService.GetProductsByStoreIdIncludingNoPricesAsync(id);
        displayedProducts = allProducts.Take(batchSize).ToList();
        loadedCount = displayedProducts.Count;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isMapReady = true;
            StateHasChanged();
            await Task.Delay(200);

            if (!string.IsNullOrEmpty(Latitude) && !string.IsNullOrEmpty(Longitude))
            {
                await TryLoadMap();
            }

            await JS.InvokeVoidAsync("initScrollObserver", DotNetObjectReference.Create(this));
        }
    }

    private string ExtractLatitudeFromUrl(string url)
    {
        if (string.IsNullOrEmpty(url)) return null;
        var match = Regex.Match(url, "!3d([\\-0-9.]+)");
        return match.Success ? match.Groups[1].Value : null;
    }

    private string ExtractLongitudeFromUrl(string url)
    {
        if (string.IsNullOrEmpty(url)) return null;
        var match = Regex.Match(url, "!4d([\\-0-9.]+)");
        return match.Success ? match.Groups[1].Value : null;
    }

    private async Task TryLoadMap()
    {
        try
        {
            await JS.InvokeVoidAsync("loadStoreMap", Latitude, Longitude, store.Name);
        }
        catch (JSException jsEx)
        {
            Console.WriteLine("Erro ao carregar mapa: " + jsEx.Message);
        }
    }

    private void NavigateToProduct(int id)
    {
        Navigation.NavigateTo($"/moreinfo-product/{id}");
    }

    [JSInvokable]
    public async Task LoadMoreProducts()
    {
        var more = allProducts.Skip(loadedCount).Take(batchSize).ToList();
        if (more.Any())
        {
            displayedProducts.AddRange(more);
            loadedCount += more.Count;
            await InvokeAsync(StateHasChanged);
        }
    }
}

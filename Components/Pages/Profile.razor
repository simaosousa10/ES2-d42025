@page "/profile"
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@using ESIID42025.Data
@using ESIID42025.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IProductService ProductService
@inject UserManager<User> UserManager
@inject ApplicationDbContext Db
@rendermode InteractiveServer

<h1 class="visually-hidden">Profile</h1>

<div class="container-fluid px-4 mt-4">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3 col-lg-2 bg-light px-4 py-4">
            <div class="text-center mb-4">
                <i class="bi bi-person-circle" style="font-size: 4.5rem; color: #2962FF;"></i>
                <h5 class="mt-3 fw-bold" style="color: #2962FF; font-size: 1.3rem;">Hello, @userName!</h5>
            </div>

            <ul class="list-unstyled">
                <li class="d-flex justify-content-between align-items-center py-3 border-bottom" style="cursor: pointer;" @onclick="@(() => SelectSection("Account"))">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-person-fill me-3" style="font-size: 1.5rem; color: black;"></i>
                        <span class="fw-semibold text-dark" style="font-size: 1.2rem;">Account</span>
                    </div>
                    <i class="bi bi-chevron-right text-muted" style="font-size: 1.2rem;"></i>
                </li>

                <li class="d-flex justify-content-between align-items-center py-3 border-bottom" style="cursor: pointer;" @onclick="@(() => SelectSection("Confirmations"))">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-check-circle me-3" style="font-size: 1.5rem; color: black;"></i>
                        <span class="fw-semibold text-dark" style="font-size: 1.2rem;">Confirmations</span>
                    </div>
                    <i class="bi bi-chevron-right text-muted" style="font-size: 1.2rem;"></i>
                </li>

                <li class="d-flex justify-content-between align-items-center py-3 border-bottom" style="cursor: pointer;" @onclick="@(() => SelectSection("Messages"))">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-chat-left-text me-3" style="font-size: 1.5rem; color: black;"></i>
                        <span class="fw-semibold text-dark" style="font-size: 1.2rem;">Messages</span>
                    </div>
                    <i class="bi bi-chevron-right text-muted" style="font-size: 1.2rem;"></i>
                </li>

                <li class="d-flex justify-content-between align-items-center py-3 mt-4" style="cursor: pointer;" @onclick="Logout">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-box-arrow-right me-3" style="font-size: 1.5rem; color: #2962FF;"></i>
                        <span class="fw-semibold" style="font-size: 1.2rem; color: #2962FF;">Logout</span>
                    </div>
                </li>
            </ul>
        </div>

        <!-- Main Content -->
        <div class="col-md-9 col-lg-10 px-4 py-4">
            @if (selectedSection == "Account")
            {
                <h3 class="fw-bold mb-4">👤 Conta</h3>
                <p class="text-muted">Informações da conta serão aqui apresentadas futuramente.</p>
            }
            else if (selectedSection == "Confirmations")
            {
                <h3 class="fw-bold mb-4">✅ As suas confirmações</h3>
                @if (!confirmations.Any())
                {
                    <p class="text-muted">Ainda não tem nenhuma confirmação de preços.</p>
                }
                else
                {
                    <div class="list-group">
                        @foreach (var confirmation in confirmations)
                        {
                            <div class="list-group-item list-group-item-action">
                                Produto: <strong>@confirmation.PriceID</strong><br />
                                Data: @confirmation.Confirmation_DateTime.ToString("dd/MM/yyyy HH:mm")
                            </div>
                        }
                    </div>
                }
            }
            else if (selectedSection == "Messages")
            {
                <h3 class="fw-bold mb-4">📬 Mensagens Recebidas</h3>
                @if (!userMessages.Any())
                {
                    <div class="text-center mt-5">
                        <img src="/images/NoMessage.png" alt="Sem mensagens" style="max-width: 250px; width: 80%;" />
                        <p class="text-muted mt-3">Sem mensagens por agora.</p>
                    </div>
                }
                else
                {
                    <div class="list-group">
                        @foreach (var message in userMessages)
                        {
                            <div class="list-group-item list-group-item-action">
                                <strong>@message.Title</strong><br />
                                <small class="text-muted">Enviada em: @message.Sent_Date.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</small>
                                <p class="mt-2">@message.Content</p>
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private string selectedSection = "Confirmations";
    private List<PriceConfirmation> confirmations = new();
    private List<Message> userMessages = new();
    private string userName = "User";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userName = user.Identity.Name ?? "User";
            var userId = user.FindFirst("sub")?.Value
                         ?? user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                confirmations = await ProductService.GetConfirmationsForUserAsync(userId);

                userMessages = await Db.Messages
                    .Where(m => m.UserID == userId)
                    .OrderByDescending(m => m.Sent_Date)
                    .ToListAsync();
            }
        }
    }

    private void SelectSection(string section)
    {
        selectedSection = section;
    }

    private void Logout()
    {
        Navigation.NavigateTo("/Account/Logout", forceLoad: true);
    }
}

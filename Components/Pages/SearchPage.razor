@page "/search/{term}"
@using ESIID42025.Data
@using ESIID42025.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (pagedProducts == null)
{
    <p class="text-center">A carregar...</p>
}
else if (!pagedProducts.Any())
{
    <div class="text-center mt-5">
        <img src="images/ProductsNotFound.png" alt="Sem resultados" class="img-fluid" style="max-height: 500px;" />
    </div>
}
else
{
    <h3 class="text-center mt-4">Resultados para: "@term"</h3>
    <div class="d-flex flex-wrap justify-content-between align-items-center mb-4 px-3">
        <div class="d-flex align-items-center gap-2">
            <label class="form-label m-0">Price Range:</label>
            <input type="number" class="form-control" style="width: 100px;" @bind="minPrice" @oninput="(e) => ApplyFilters()" @onblur="ApplyFilters"/>
            <span>to</span>
            <input type="number" class="form-control" style="width: 100px;" @bind="maxPrice" @oninput="(e) => ApplyFilters()" @onblur="ApplyFilters"/>
        </div>

        <div>
            <select class="form-select" style="width: 200px;" @onchange="OnSortOptionChanged">
                <option value="price-asc">Price (Low to High)</option>
                <option value="price-desc">Price (High to Low)</option>
                <option value="name-asc">Name (A-Z)</option>
                <option value="name-desc">Name (Z-A)</option>
                <option value="date-asc">Date (Oldest First)</option>
                <option value="date-desc">Date (Newest First)</option>
            </select>

        </div>
    </div>

    <div class="container mt-4">
        <div class="d-grid gap-4" style="grid-template-columns: repeat(5, 1fr);">
            @foreach (var product in pagedProducts)
            {
                var price = GetMostRecentBestPrice(product);
                var storeCount = product.Prices?.Select(p => p.StoreID).Distinct().Count() ?? 0;

                <div class="card shadow-sm border-0 h-100" style="cursor: pointer;" @onclick="() => NavigateToProduct(product.ID)">
                    <img src="@(product.Images?.FirstOrDefault()?.UrlImage ?? "/images/default.png")"
                         class="card-img-top p-3"
                         style="height: 200px; object-fit: contain;"
                         alt="@product.Name" />

                    <div class="card-body d-flex flex-column justify-content-between">
                        <h6 class="card-title text-truncate">@product.Name</h6>
                        <p class="mb-1"><strong>@(price?.ToString("C2") ?? "N/A")</strong></p>
                        <small class="text-muted">in @storeCount store@(storeCount == 1 ? "" : "s")</small>
                    </div>
                </div>
            }
        </div>
    </div>

    @if (TotalPages > 1)
    {
        <div class="mt-4 d-flex justify-content-center">
            @for (int i = 1; i <= TotalPages; i++)
            {
                <button class="btn @(i == CurrentPage ? "btn-primary" : "btn-outline-primary") mx-1"
                        @onclick="() => SetPage(i)">@i</button>
            }
        </div>
    }
}

@code {
    [Parameter]
    public string term { get; set; }

    private const int ProductsPerPage = 50;
    private int CurrentPage = 1;
    private int TotalPages = 1;
    private List<Product> allProducts = new();
    private List<Product> filteredProducts = new();
    private List<Product> pagedProducts = new();

    private double minPrice = 0;
    private double maxPrice = 9999;
    private string sortOption = "price-asc";

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(term))
        {
            pagedProducts = new();
            return;
        }

        var loweredTerm = term.ToLower();

        allProducts = await Db.Products
            .Include(p => p.Prices).ThenInclude(p => p.Store)
            .Include(p => p.Category)
            .Include(p => p.Images)
            .Where(p =>
                p.Name.ToLower().Contains(loweredTerm) ||
                p.Category.Name.ToLower().Contains(loweredTerm) ||
                p.Prices.Any(pr => pr.Store.Name.ToLower().Contains(loweredTerm)))
            .ToListAsync();

        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredProducts = allProducts
            .Where(p =>
            {
                var price = GetMostRecentBestPrice(p);
                return price == null || (price >= minPrice && price <= maxPrice);

            })
            .ToList();

        filteredProducts = sortOption switch
        {
            "price-asc" => filteredProducts.OrderBy(p => GetMostRecentBestPrice(p) ?? double.MaxValue).ToList(),
            "price-desc" => filteredProducts.OrderByDescending(p => GetMostRecentBestPrice(p) ?? double.MinValue).ToList(),

            "name-asc" => filteredProducts.OrderBy(p => p.Name).ToList(),
            "name-desc" => filteredProducts.OrderByDescending(p => p.Name).ToList(),
            "date-asc" => filteredProducts.OrderBy(p => p.Registration_Date).ToList(),
            "date-desc" => filteredProducts.OrderByDescending(p => p.Registration_Date).ToList(),
            _ => filteredProducts
        };

        TotalPages = (int)Math.Ceiling((double)filteredProducts.Count / ProductsPerPage);
        SetPage(CurrentPage);
    }

    private void SetPage(int page)
    {
        CurrentPage = page;
        pagedProducts = filteredProducts
            .Skip((CurrentPage - 1) * ProductsPerPage)
            .Take(ProductsPerPage)
            .ToList();
    }
    
    private double? GetMostRecentBestPrice(Product p)
    {
        return p.Prices
            ?.Where(pr => pr.Date >= DateTime.UtcNow.AddMonths(-3))
            .GroupBy(pr => pr.StoreID)
            .Select(g => g.OrderByDescending(pr => pr.Date).FirstOrDefault())
            .OrderBy(pr => pr.Value)
            .Select(pr => (double?)pr.Value)
            .FirstOrDefault();
    }

    
    private void OnSortOptionChanged(ChangeEventArgs e)
    {
        sortOption = e.Value?.ToString();
        ApplyFilters();
    }


    private void NavigateToProduct(int id)
    {
        Navigation.NavigateTo($"/product/{id}");
    }
}

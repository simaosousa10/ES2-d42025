@page "/categories"
@using ESIID42025.DTOs
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Categorias</PageTitle>

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-start align-items-center mb-3">
        <button class="btn btn-outline-secondary me-3" @onclick="GoBack">
            <i class="bi bi-arrow-left"></i>
        </button>
        <h3 class="mb-0">ðŸ“‚ Categories</h3>
    </div>
</div>

@if (isLoading)
{
    <p><em>Loading Categories...</em></p>
}
else if (categories.Count == 0)
{
    <p><em>No Categories.</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Description</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var category in categories)
        {
            <tr>
                <td>@category.ID</td>
                <td>@category.Name</td>
                <td>@category.Description</td>
                <td>
                    <button class="btn btn-primary btn-sm me-2" @onclick="() => EditCategory(category.ID)">Edit</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteCategory(category.ID, category.Name)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <button class="btn btn-primary mt-3" @onclick="AddCategory">Add Category</button>
}

@code {
    List<CategoryDto> categories = new();
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetAllCategoriesAsync();
        isLoading = false;
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/AdminFeatures");
    }

    private void AddCategory()
    {
        NavigationManager.NavigateTo("/categories/create");
    }

    private void EditCategory(int id)
    {
        NavigationManager.NavigateTo($"/categories/edit/{id}");
    }

    private async Task ConfirmDeleteCategory(int id, string name)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure u want to delete the category \"{name}\"?");
        if (confirmed)
        {
            await DeleteCategory(id);
        }
    }

    private async Task DeleteCategory(int id)
    {
        await CategoryService.DeleteCategoryAsync(id);
        categories = await CategoryService.GetAllCategoriesAsync();
        StateHasChanged();
    }
}
@page "/reports/general"
@inject IProductService ProductService
@inject PdfReportService PdfReportService
@inject NavigationManager NavManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JS

@using ESIID42025.Models
@using Microsoft.AspNetCore.Mvc
@rendermode InteractiveServer

<PageTitle>Relatório Geral de Lojas</PageTitle>

<div class="container my-4">
    <h2 class="mb-4 fw-semibold">Relatório Geral de Lojas</h2>

    <div class="mb-3 text-end">
        <button class="btn btn-outline-primary" @onclick="DownloadPdf">
            <i class="bi bi-file-earmark-pdf me-1"></i>
            Gerar PDF
        </button>
    </div>

    @if (stores is null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">A carregar…</span>
            </div>
        </div>
    }
    else if (!stores.Any())
    {
        <div class="alert alert-warning">Nenhuma loja encontrada.</div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var store in stores)
            {
                var hasData = categoryCountsByStore.TryGetValue(store.ID, out var categoryCounts);

                <div class="col">
                    <div class="card store-card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center bg-white border-0">
                            <span class="fs-5 fw-bold">@store.Name</span>

                            @if (hasData && categoryCounts.Any())
                            {
                                <span class="badge total-badge">
                                    @categoryCounts.Values.Sum() produtos
                                </span>
                            }
                        </div>

                        <div class="card-body">
                            <p class="mb-3 text-muted">
                                <i class="bi bi-geo-alt-fill me-1"></i>
                                @store.Location
                            </p>

                            <h6 class="text-primary mb-2">
                                <i class="bi bi-tags-fill me-1"></i>
                                Categorias
                            </h6>

                            @if (hasData && categoryCounts.Any())
                            {
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var entry in categoryCounts)
                                    {
                                        <span class="badge category-badge">
                                            @entry.Key
                                            <span class="badge bg-secondary ms-1">@entry.Value</span>
                                        </span>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="text-muted fst-italic">Sem produtos registados.</p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    /* ---------- Cartões ---------- */
    .store-card {
        border: none;
        border-radius: 0.75rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
        transition: transform .15s ease-in-out, box-shadow .15s ease-in-out;
    }
    .store-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 4px 14px rgba(0, 0, 0, 0.12);
    }

    /* ---------- Badges ---------- */
    .total-badge {
        background-color: #0d6efd;
        color: #fff;
        font-weight: 500;
        border-radius: 1rem;
        padding: 0.35rem .75rem;
        font-size: 0.85rem;
    }
    .category-badge {
        background-color: #f1f1f1;
        color: #333;
        font-weight: 500;
        border-radius: 1rem;
        padding: 0.35rem .75rem;
        font-size: 0.8rem;
    }
</style>

@code {
    private List<Store> stores;
    private Dictionary<int, Dictionary<string, int>> categoryCountsByStore = new();

    protected override async Task OnInitializedAsync()
    {
        // Lojas
        stores = await ProductService.GetAllStoresAsync();

        // Todos os produtos (inclui preços, categorias, etc.)
        var allProducts = await ProductService.GetAllProductsAsync();

        foreach (var store in stores)
        {
            // Seleciona produtos que têm pelo menos um preço nessa loja
            var productsInStore = allProducts
                .Where(p => p.Prices.Any(pr => pr.StoreID == store.ID) && p.Category != null)
                .ToList();

            // Agrupa por categoria e conta
            var categoryCounts = productsInStore
                .GroupBy(p => p.Category.Name)
                .ToDictionary(g => g.Key, g => g.Count());

            categoryCountsByStore[store.ID] = categoryCounts;
        }
    }
    
    private async Task DownloadPdf()
    {
        var userName = HttpContextAccessor.HttpContext?.User.Identity?.Name ?? "Utilizador desconhecido";
        var pdfBytes = PdfReportService.GenerateStoreReportPdf(userName, stores, categoryCountsByStore);

        using var stream = new MemoryStream(pdfBytes);
        using var streamRef = new DotNetStreamReference(stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", $"RelatorioLojas_{DateTime.Now:yyyyMMddHHmmss}.pdf", streamRef);
    }
}

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);

        const anchorElement = document.createElement("a");
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();

        anchorElement.remove();
        URL.revokeObjectURL(url);
    };

    console.log("Função downloadFileFromStream registada diretamente na página");
</script>


@page "/reports/product"
@using ESIID42025.DTOs
@inject IProductService ProductService
@inject PdfReportService PdfService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Relatório por Produto</PageTitle>

<div class="container my-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-semibold text-primary">Relatório Específico por Produto</h2>
        @if (selectedProduct != null)
        {
            <button class="btn btn-outline-primary" @onclick="GeneratePdf">
                <i class="bi bi-file-earmark-pdf me-1"></i> Gerar PDF
            </button>
        }
    </div>

    <div class="mb-4 position-relative" style="z-index: 1050;">
        <label class="form-label">Escreve o nome de um produto:</label>
        <input class="form-control" type="text" placeholder="Pesquisar produto..."
               @oninput="HandleInput" />

        @if (suggestions.Any())
        {
            <ul class="list-group position-absolute bg-white border rounded shadow mt-1"
                style="width: 100%; z-index: 1060; max-height: 300px; overflow-y: auto;">
                @foreach (var suggestion in suggestions)
                {
                    <li class="list-group-item list-group-item-action d-flex align-items-center"
                        @onclick="() => OnProductSelected(suggestion.Id ?? 0)">
                        <i class="bi bi-box me-2 text-primary"></i>
                        <div>
                            <strong>@suggestion.Text</strong>
                        </div>
                    </li>
                }
            </ul>
        }
    </div>

    @if (selectedProduct != null)
    {
        <div class="card shadow-sm p-4">
            <div class="row align-items-center">
                <!-- Imagem à esquerda -->
                <div class="col-md-4 text-center mb-3 mb-md-0">
                    <img src="@selectedProduct.Images?.FirstOrDefault()?.UrlImage"
                         alt="@selectedProduct.Name"
                         class="img-fluid rounded border"
                         style="max-height: 280px; object-fit: contain;" />
                </div>

                <!-- Informações à direita -->
                <div class="col-md-8">
                    <h3 class="fw-bold">@selectedProduct.Name</h3>
                    <p class="text-muted">@selectedProduct.Description</p>
                    <p class="text-muted mb-0">
                        Categoria: <strong>@selectedProduct.Category?.Name</strong>
                    </p>
                </div>
            </div>

            @if (GetLatestPricesByStore().Any())
            {
                <hr class="my-4" />
                <h5 class="fw-semibold">Preços mais recentes:</h5>
                <ul class="list-group mt-3">
                    @foreach (var price in GetLatestPricesByStore())
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@price.Store?.Name</strong><br />
                                <small class="text-muted">@price.Date.ToString("dd/MM/yyyy")</small>
                            </div>
                            <span class="badge bg-primary fs-6">@price.Value.ToString("0.00") €</span>
                        </li>
                    }
                </ul>
            }
            else
            {
                <hr class="my-4" />
                <p class="text-muted">Sem preços disponíveis.</p>
            }
        </div>
    }
</div>

@code {
    private string searchTerm = string.Empty;
    private List<SuggestionModel> suggestions = new();
    private Product selectedProduct;
    private System.Timers.Timer debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        await UpdateSuggestions();
    }

    private async Task HandleInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        StartDebounce();
    }

    private async Task OnProductSelected(int id)
    {
        selectedProduct = await ProductService.GetProductWithStorePricesAsync(id);
        searchTerm = selectedProduct?.Name ?? string.Empty;
        suggestions.Clear();
        StateHasChanged();
    }

    private void StartDebounce()
    {
        debounceTimer?.Stop();
        debounceTimer?.Dispose();

        debounceTimer = new System.Timers.Timer(300);
        debounceTimer.Elapsed += async (s, e) =>
        {
            debounceTimer.Dispose();
            debounceTimer = null;
            await InvokeAsync(UpdateSuggestions);
        };
        debounceTimer.AutoReset = false;
        debounceTimer.Start();
    }

    private async Task UpdateSuggestions()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var all = await ProductService.GetSearchSuggestionsAsync(searchTerm);
            suggestions = all
                .Where(s => s.Type == "product")
                .Select(s => new SuggestionModel
                {
                    Id = s.Id,
                    Text = s.Text,
                    Type = s.Type
                })
                .ToList();
        }
        else
        {
            suggestions.Clear();
        }

        StateHasChanged();
    }

    private IEnumerable<Price> GetLatestPricesByStore()
    {
        return selectedProduct?.Prices
                   ?.Where(p => p.Store != null)
                   .GroupBy(p => p.StoreID)
                   .Select(g => g.OrderByDescending(p => p.Date).First())
                   .OrderBy(p => p.Value)
               ?? Enumerable.Empty<Price>();
    }

    private async Task GeneratePdf()
    {
        if (selectedProduct == null) return;

        var pdfBytes = PdfService.GenerateProductReportPdf("admin@example.com", selectedProduct);
        using var streamRef = new DotNetStreamReference(new MemoryStream(pdfBytes));
        await JS.InvokeVoidAsync("downloadFileFromStream", $"relatorio_produto_{selectedProduct.ID}.pdf", streamRef);
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        StartDebounce();
    }

    public class SuggestionModel
    {
        public int? Id { get; set; }
        public string Text { get; set; }
        public string Type { get; set; }
    }
}

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);

        const anchorElement = document.createElement("a");
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();

        anchorElement.remove();
        URL.revokeObjectURL(url);
    };
</script>
